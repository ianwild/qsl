static const PROGMEM uint8_t frozen_bytes [] = {
#include /* */ "bytes.ci"
};

static const PROGMEM uint16_t frozen_words [] = {
#include /* */ "words.ci"
};

static const PROGMEM frozen_hdr frozen_objects [] = {
#include /* */ "objects.ci"
};

const frozen_hdr *get_frozen_header (obj o)
{
  if (o < FIRST_FROZEN_OBJECT || o > LAST_FROZEN_OBJECT)
  {
    print_int (FIRST_FROZEN_OBJECT);
    printc ('<'); print_int (o);
    printc ('<'); print_int (LAST_FROZEN_OBJECT);
    printc ('\n');

    throw_error (bad_obj);
  }

  return (frozen_objects + (o - FIRST_FROZEN_OBJECT));
}

enum typecode frozen_type (obj o)
{
  const frozen_hdr *p = get_frozen_header (o);
  return ((enum typecode) pgm_read_byte_near (&p -> typecode));
}

const obj *get_frozen_body (obj o)
{
  const frozen_hdr *p = get_frozen_header (o);
  uint16_t offset = pgm_read_word_near (&p -> u.array_val);
  return (frozen_words + offset);
}

const uint8_t *get_frozen_spelling (obj o)
{
  const frozen_hdr *p = get_frozen_header (o);
  uint16_t offset = pgm_read_word_near (&p -> u.string_val);
  return (frozen_bytes + offset);
}
